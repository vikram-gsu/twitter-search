{"version":3,"sources":["components/HashTag/index.tsx","contexts/FilterContext.tsx","containers/Filter/index.tsx","containers/Heading/index.tsx","components/ResultRow/index.tsx","containers/Results/index.tsx","containers/Search/index.tsx","types/app-state.ts","reducers/tweetsReducer.ts","api/format-data.ts","hooks/useDebounce.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HashTagStyles","styled","button","selected","HashTag","value","onHashTagClick","onClick","FilterContext","React","createContext","useFilter","useContext","FilterProvider","children","Provider","FilterStyles","div","Filter","allHashTags","selectedHashTags","clearHashTagSelection","disabled","size","map","hashTag","has","HeadingStyles","Heading","ResultRowStyles","props","seqNbr","Avatar","img","TweetStyles","Username","TweetContent","HashTags","ResultRow","result","image_url","text","hash_tags","user_screen_name","tweet_url","data-testid","src","alt","href","memo","ResultsStyles","LoadMore","Results","loading","results","onLoadMoreClick","id","SearchStyles","Search","POSSIBLE_STATES","searchValue","onSearchChange","type","placeholder","onChange","autoFocus","INITIAL_STATE","currentSearchText","Set","loadMore","hasError","tweetsReducer","state","action","SET_SEARCH_TEXT","payload","LOADING_RESULTS","HAS_ERROR","errorMessage","message","LOADING_COMPLETE","Array","from","hashTags","LOAD_MORE","getUTCSecondsSinceEpoch","date","Math","round","getTime","getTimezoneOffset","getAllHashTags","statuses","reduce","status","useDebounce","delay","useState","initialValue","setInitialValue","useEffect","timer","setTimeout","clearTimeout","AppStyles","CurrentStateMessage","App","useReducer","dispatch","setSelectedHashTags","searchText","fetchResults","useCallback","a","length","searchEndpoint","oldestResult","axios","get","response","data","currentResults","created_at","Date","id_str","full_text","lastIndexOf","slice","entities","hashtags","user","screen_name","profile_image_url","sort","result1","result2","filter","filteredResults","useMemo","currentSelection","newHashTags","delete","add","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba2b1c90.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ntype HashTagStyleProps = {\n  selected: boolean;\n};\nconst HashTagStyles = styled.button<HashTagStyleProps>`\n  text-decoration: none;\n  border: none;\n  background: none;\n  cursor: pointer;\n  background-color: ${({ selected }) =>\n    selected ? \"var(--blue-200)\" : \"var(--blue-100)\"};\n  color: ${({ selected }) =>\n    selected ? \"var(--blue-100)\" : \"var(--blue-200)\"};\n  display: inline-block;\n  padding: 0.5em 1.2em;\n  margin: 0.4em;\n  border-radius: 20px;\n  text-align: center;\n  :hover {\n    color: var(--white);\n    background-color: var(--blue-200);\n  }\n`;\nexport type HashTagProps = {\n  value: string;\n  selected: boolean;\n  onHashTagClick: (currentSelection: string) => void;\n};\nfunction HashTag({ value, selected, onHashTagClick }: HashTagProps) {\n  return (\n    <HashTagStyles onClick={() => onHashTagClick(value)} selected={selected}>\n      #{value}\n    </HashTagStyles>\n  );\n}\n\nexport default HashTag;\n","import React, { useContext } from \"react\";\n\ninterface FilterValueType {\n  selectedHashTags: Set<string>;\n  onHashTagClick: (currnetSelection:string) => void;\n  clearHashTagSelection: ()=> void;\n}\nconst FilterContext = React.createContext<FilterValueType|null>(null);\n\nconst useFilter = () => useContext(FilterContext);\ntype FilterProviderProps = {\n  value: FilterValueType;\n  children: React.ReactNode;\n};\nconst FilterProvider = ({ value, children }: FilterProviderProps) => (\n  <FilterContext.Provider value={value}>{children}</FilterContext.Provider>\n);\nexport { FilterProvider, useFilter };\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport HashTag from \"../../components/HashTag\";\nimport { useFilter } from \"../../contexts/FilterContext\";\nconst FilterStyles = styled.div`\n  grid-area: filter;\n  display: flex;\n  flex-direction: column;\n  background-color: var(--white);\n  padding: 1em;\n  border-radius: var(--box-border-radius);\n  box-shadow: var(--box-shadow);\n  height: max-content;\n  p {\n    margin: 0;\n    font-size: 1.1em;\n    font-weight: bold;\n    color: var(--gray-300);\n    padding-bottom: 1em;\n    button {\n      border: none;\n      background: none;\n      padding: 0;\n      border-radius: 10px;\n      font-size: 0.75em;\n      color: var(--blue-200);\n      padding: 0 0.5em;\n      margin-left: 0.5em;\n      cursor: pointer;\n      :hover {\n        color: var(--blue-100);\n        background-color: var(--blue-200);\n      }\n      :disabled {\n        color: var(--gray-500);\n        background-color: white;\n        cursor: auto;\n      }\n    }\n  }\n  @media screen and (max-width: 467px) {\n    height: auto;\n    overflow: scroll;\n  }\n`;\n\ntype FilterProps = {\n  allHashTags: string[];\n};\nfunction Filter({ allHashTags = [] }: FilterProps) {\n  const { selectedHashTags, clearHashTagSelection, onHashTagClick } =\n    useFilter()!;\n  return (\n    <FilterStyles>\n      <p>\n        Filter by hashtag\n        <button\n          disabled={selectedHashTags.size === 0}\n          onClick={clearHashTagSelection}\n        >\n          Clear selection\n        </button>\n      </p>\n\n      <div>\n        {allHashTags.map((hashTag) => (\n          <HashTag\n            key={hashTag}\n            value={hashTag}\n            selected={selectedHashTags.has(hashTag)}\n            onHashTagClick={onHashTagClick}\n          />\n        ))}\n      </div>\n    </FilterStyles>\n  );\n}\n\nexport default Filter;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst HeadingStyles = styled.div`\n    grid-area: header;\n    padding: 2em 0;\n    font-size: 1.5em;\n    font-weight: bold;\n    @media screen and (max-width: 467px){\n        padding: 1em;\n    }\n`;\n\nfunction Heading() {\n    return (\n        <HeadingStyles>\n            Tweet Feed\n        </HeadingStyles>\n    )\n}\n\nexport default Heading\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport searchResult from \"../../types/search-result\";\nimport HashTag from \"../HashTag\";\nimport { useFilter } from \"../../contexts/FilterContext\";\n\ntype ResultRowStylesProps = {\n  seqNbr: number;\n};\nconst ResultRowStyles = styled.div<ResultRowStylesProps>`\n  display: flex;\n  background-color: ${(props) =>\n    props.seqNbr % 2 === 0 ? \"var(--white)\" : \"var(--gray-100)\"};\n  padding: 1em;\n\n  :hover {\n    background-color: var(--gray-200);\n  }\n`;\nconst Avatar = styled.img`\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n`;\n\nconst TweetStyles = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 0 1em 1em 1em;\n`;\nconst Username = styled.div`\n  font-weight: bold;\n  padding: 0.5em 0;\n`;\nconst TweetContent = styled.div`\n  padding: 0.5em 0;\n  a {\n    text-decoration: none;\n    color: var(--blue-200);\n    :hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst HashTags = styled.div``;\n\nexport type ResultRowType = {\n  result: searchResult;\n  seqNbr: number;\n};\nfunction ResultRow({ result, seqNbr }: ResultRowType) {\n  const { selectedHashTags, onHashTagClick } = useFilter()!;\n  const { image_url, text, hash_tags, user_screen_name, tweet_url } = result;\n\n  return (\n    <ResultRowStyles data-testid=\"Result row\" seqNbr={seqNbr}>\n      <Avatar src={image_url} alt={\"Avatar image\"} />\n      <TweetStyles>\n        <Username>@{user_screen_name}</Username>\n        <TweetContent>\n          {text}\n          <a href={tweet_url}>{tweet_url}</a>\n        </TweetContent>\n        <HashTags>\n          {hash_tags.map((hashTag) => (\n            <HashTag\n              key={hashTag}\n              value={hashTag}\n              selected={selectedHashTags.has(hashTag)}\n              onHashTagClick={onHashTagClick}\n            />\n          ))}\n        </HashTags>\n      </TweetStyles>\n    </ResultRowStyles>\n  );\n}\n\nexport default React.memo(ResultRow);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport searchResult from \"../../types/search-result\";\nimport ResultRow from \"../../components/ResultRow\";\n\nconst ResultsStyles = styled.div`\n  grid-area: results;\n  display: flex;\n  flex-direction: column;\n  box-shadow: var(--box-shadow);\n`;\nconst LoadMore = styled.div`\n  button {\n    border: none;\n    background: none;\n    color: var(--blue-200);\n    cursor: pointer;\n    padding: 1em;\n    :hover {\n      color: var(--gray-500);\n    }\n  }\n  padding: 2em 0 1em 0;\n  background-color: white;\n  display: flex;\n  justify-content: center;\n`;\n\ntype ResultsProps = {\n  loading: boolean;\n  results: searchResult[];\n  onLoadMoreClick: () => void;\n};\nfunction Results({ loading, results, onLoadMoreClick }: ResultsProps) {\n  return (\n    <ResultsStyles>\n      {results.map((result, seqNbr) => (\n        <ResultRow\n          key={result.id}\n          result={result}\n          seqNbr={seqNbr}\n        />\n      ))}\n      <LoadMore>\n        {loading ? (\n          <span>Loading...</span>\n        ) : (\n          <button onClick={onLoadMoreClick}>Load More</button>\n        )}\n      </LoadMore>\n    </ResultsStyles>\n  );\n}\n\nexport default React.memo(Results);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SearchStyles = styled.div`\n  grid-area: search;\n  input {\n    width: 100%;\n    height: 2em;\n    padding: 1.2em;\n    border: 1px solid var(--gray-200);\n    border-radius: var(--textbox-border-radius);\n    :hover {\n      outline: 1px solid var(--blue-200);\n    }\n    :focus {\n      outline: 2px solid var(--blue-200);\n    }\n  }\n  @media screen and (max-width: 467px){\n    margin: 0 1em;\n    height: 4em;\n  }\n`;\n\ntype SearchProps = {\n  searchValue?: string;\n  onSearchChange: (e:React.ChangeEvent<HTMLInputElement>)=>void\n};\nfunction Search({ searchValue = \"\", onSearchChange }: SearchProps) {\n  return (\n    <SearchStyles>\n      <input\n        type=\"search\"\n        value={searchValue}\n        placeholder=\"Search by keyword\"\n        onChange={onSearchChange}\n        autoFocus={true}\n      />\n    </SearchStyles>\n  );\n}\n\nexport default Search;\n","import searchResult from \"./search-result\";\n\ntype AppStateType = {\n  currentSearchText: string;\n  results: searchResult[];\n  allHashTags: Set<string>;\n  loading: boolean;\n  loadMore: number;\n  hasError: boolean;\n  errorMessage?: string;\n};\n\nenum POSSIBLE_STATES {\n  SET_SEARCH_TEXT = \"SET_SEARCH_TEXT\",\n  LOADING_RESULTS = \"LOADING_RESULTS\",\n  LOADING_COMPLETE = \"LOADING_COMPLETE\",\n  HAS_ERROR = \"HAS_ERROR\",\n  LOAD_MORE = \"LOAD_MORE\",\n}\nexport type ActionType =\n  | {\n      type: POSSIBLE_STATES.SET_SEARCH_TEXT;\n      payload: {\n        currentSearchText: string;\n      };\n    }\n  | { type: POSSIBLE_STATES.LOADING_RESULTS }\n  | {\n      type: POSSIBLE_STATES.LOADING_COMPLETE;\n      payload: {\n        loadMore: number;\n        results: searchResult[];\n        hashTags: Set<string>;\n      };\n    }\n  | {\n      type: POSSIBLE_STATES.HAS_ERROR;\n      payload: {\n        message: string;\n      };\n    }\n  | {\n      type: POSSIBLE_STATES.LOAD_MORE;\n      payload: {\n        loadMore: number;\n      };\n    };\n\nexport { POSSIBLE_STATES };\n\nexport default AppStateType;\n","import AppStateType, { ActionType, POSSIBLE_STATES } from \"../types/app-state\";\n\nconst INITIAL_STATE: AppStateType = {\n  currentSearchText: \"\",\n  results: [],\n  allHashTags: new Set(),\n  loading: false,\n  loadMore: 0,\n  hasError: false\n};\n\nfunction tweetsReducer(state: AppStateType, action: ActionType): AppStateType {\n  switch (action.type) {\n    case POSSIBLE_STATES.SET_SEARCH_TEXT:\n      return {\n        ...state,\n        currentSearchText: action.payload.currentSearchText,\n        results: [],\n        loadMore: 0,\n      };\n    case POSSIBLE_STATES.LOADING_RESULTS:\n      return { ...state, loading: true };\n    case POSSIBLE_STATES.HAS_ERROR:\n      return { ...state, hasError: true, errorMessage: action.payload.message };\n    case POSSIBLE_STATES.LOADING_COMPLETE:\n      if (action.payload.loadMore > 0) {\n        return {\n          ...state,\n          loading: false,\n          hasError: false,\n          loadMore: action.payload.loadMore,\n          results: [...state.results, ...action.payload.results],\n          allHashTags: new Set([\n            ...Array.from(state.allHashTags),\n            ...Array.from(action.payload.hashTags),\n          ]),\n        };\n      }\n      return {\n        ...state,\n        loading: false,\n        hasError: false,\n        loadMore: action.payload.loadMore,\n        results: action.payload.results,\n        allHashTags: action.payload.hashTags,\n      };\n    case POSSIBLE_STATES.LOAD_MORE:\n      return {\n        ...state,\n        loadMore: action.payload.loadMore,\n      };\n    default:\n      return state;\n  }\n}\nexport { INITIAL_STATE };\nexport default tweetsReducer;\n","import searchResult from \"../types/search-result\";\n\nconst getUTCSecondsSinceEpoch = (date: Date) =>\n  Math.round((date.getTime() + date.getTimezoneOffset() * 60 * 1000) / 1000);\nfunction formatData(statuses: any): searchResult[] {\n  return statuses\n    .map((status: any) => ({\n      created_at: new Date(status.created_at),\n      id: status.id_str,\n      text:\n        status.full_text.lastIndexOf(\"http\") === -1\n          ? status.full_text\n          : status.full_text.slice(0, status.full_text.lastIndexOf(\"http\")),\n      hash_tags: status.entities.hashtags.map((hashTag: any) => hashTag.text),\n      user_screen_name: status.user.screen_name,\n      image_url: status.user.profile_image_url,\n      tweet_url: status.full_text.slice(\n        status.full_text.lastIndexOf(\"http\"),\n        status.full_text.length\n      ),\n    }))\n    .sort((result1: searchResult, result2: searchResult) => {\n      return (\n        getUTCSecondsSinceEpoch(result2.created_at) -\n        getUTCSecondsSinceEpoch(result1.created_at)\n      );\n    });\n}\n\nfunction getAllHashTags(statuses: any): Set<string> {\n  return new Set(\n    statuses.reduce(\n      (hashTags: string[], status: any) => [...hashTags, ...status.hash_tags],\n      []\n    )\n  );\n}\n\nexport { formatData, getAllHashTags };\n","import { useState, useEffect } from \"react\";\n\nfunction useDebounce(value: string, delay: number) {\n  const [initialValue, setInitialValue] = useState(value);\n\n  useEffect(() => {\n    let timer = setTimeout(() => setInitialValue(value), delay);\n    return () => clearTimeout(timer);\n  }, [value, delay]);\n  return initialValue;\n}\n\nexport default useDebounce;\n","import React, {\n  useReducer,\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from \"react\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nimport Filter from \"./containers/Filter\";\nimport Heading from \"./containers/Heading\";\nimport Results from \"./containers/Results\";\nimport Search from \"./containers/Search\";\nimport tweetsReducer, { INITIAL_STATE } from \"./reducers/tweetsReducer\";\nimport AppStateType, { ActionType, POSSIBLE_STATES } from \"./types/app-state\";\nimport { formatData, getAllHashTags } from \"./api/format-data\";\nimport { FilterProvider } from \"./contexts/FilterContext\";\nimport useDebounce from \"./hooks/useDebounce\";\nimport searchResult from \"./types/search-result\";\n\nconst AppStyles = styled.div`\n  display: grid;\n  grid-template-areas:\n    \". header  header .\"\n    \". search  filter .\"\n    \". results filter .\";\n  grid-template-columns: 20vw 40vw 18vw 22vw;\n  grid-template-rows: 6em 4em 1fr;\n  grid-gap: 1em;\n  @media screen and (max-width: 467px) {\n    grid-template-areas:\n      \"header\"\n      \"search\"\n      \"filter\"\n      \"results\";\n    grid-template-columns: 1fr;\n    grid-template-rows: 4em 4em 12em 1fr;\n    grid-gap: 1em;\n  }\n`;\n\nconst CurrentStateMessage = styled.div`\n  grid-area: results;\n`;\n\nfunction App() {\n  const [state, dispatch] = useReducer<\n    (state: AppStateType, action: ActionType) => AppStateType\n  >(tweetsReducer, INITIAL_STATE);\n  const [selectedHashTags, setSelectedHashTags] = useState(new Set<string>());\n\n  const {\n    currentSearchText,\n    loading,\n    loadMore,\n    results,\n    allHashTags,\n    hasError,\n    errorMessage,\n  } = state;\n  const searchText = useDebounce(currentSearchText, 1000);\n\n  const requestEndPoint = \"https://twitter-api-backend-vikram.herokuapp.com\";\n  const fetchResults = useCallback(async () => {\n    dispatch({\n      type: POSSIBLE_STATES.LOADING_RESULTS,\n    });\n    try {\n      if (searchText.length !== 0) {\n        let searchEndpoint = `${requestEndPoint}/${searchText}`;\n        let oldestResult: searchResult | null = null;\n        if (loadMore) {\n          oldestResult = results[results.length - 1];\n          searchEndpoint = `${searchEndpoint}&max_id=${oldestResult.id}`;\n        }\n\n        const response = await axios.get(searchEndpoint);\n        let currentResults = formatData(response.data.statuses);\n        if (oldestResult) {\n          currentResults = currentResults.filter(\n            (result) => result.id !== oldestResult!.id\n          );\n        }\n        let hashTags = getAllHashTags(currentResults);\n\n        dispatch({\n          type: POSSIBLE_STATES.LOADING_COMPLETE,\n          payload: {\n            loadMore,\n            results: currentResults,\n            hashTags,\n          },\n        });\n      } else {\n        dispatch({\n          type: POSSIBLE_STATES.LOADING_COMPLETE,\n          payload: {\n            loadMore: 0,\n            results: [],\n            hashTags: new Set(),\n          },\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: POSSIBLE_STATES.HAS_ERROR,\n        payload: {\n          message: e as string,\n        },\n      });\n    }\n  }, [loadMore, searchText]);\n\n  useEffect(() => {\n    fetchResults();\n  }, [loadMore, fetchResults]);\n\n  const handleSearchTextChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    dispatch({\n      type: POSSIBLE_STATES.SET_SEARCH_TEXT,\n      payload: {\n        currentSearchText: e.target.value,\n      },\n    });\n  };\n\n  const onHashTagSelect = (currentSelection: string): void => {\n    let newHashTags = new Set(selectedHashTags);\n    if (selectedHashTags.has(currentSelection)) {\n      newHashTags.delete(currentSelection);\n    } else {\n      newHashTags.add(currentSelection);\n    }\n    setSelectedHashTags(newHashTags);\n  };\n\n  const clearHashTagSelection = () => {\n    setSelectedHashTags(new Set());\n  };\n\n  const onLoadMoreClick = () => {\n    dispatch({\n      type: POSSIBLE_STATES.LOAD_MORE,\n      payload: {\n        loadMore: loadMore + 1,\n      },\n    });\n  };\n\n  const filteredResults = useMemo(\n    () =>\n      selectedHashTags.size === 0\n        ? results\n        : results.filter(\n            (result) =>\n              result.hash_tags.filter((hashTag) =>\n                selectedHashTags.has(hashTag)\n              ).length > 0\n          ),\n    [results, selectedHashTags]\n  );\n\n  return (\n    <FilterProvider\n      value={{\n        selectedHashTags: selectedHashTags,\n        clearHashTagSelection: clearHashTagSelection,\n        onHashTagClick: onHashTagSelect,\n      }}\n    >\n      <AppStyles>\n        <Heading />\n        <Search\n          searchValue={currentSearchText}\n          onSearchChange={handleSearchTextChange}\n        />\n        {loading && filteredResults.length === 0 && (\n          <CurrentStateMessage>Loading...</CurrentStateMessage>\n        )}\n        {hasError && <CurrentStateMessage>{errorMessage}</CurrentStateMessage>}\n        {filteredResults.length > 0 && (\n          <Results\n            results={filteredResults}\n            onLoadMoreClick={onLoadMoreClick}\n            loading={loading}\n          />\n        )}\n        {allHashTags.size > 0 && (\n          <Filter allHashTags={Array.from(allHashTags)} />\n        )}\n      </AppStyles>\n    </FilterProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}